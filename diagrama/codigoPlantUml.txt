@startuml

Prenda.Borrador --> Prenda.Prenda
Prenda.Borrador..> TipoPrenda
Prenda.Borrador..> Prenda.Color
Prenda.Borrador..> Prenda.Material

Prenda.Prenda ..> TipoPrenda
Prenda.Prenda ..> Prenda.Material


Prenda.Material ..> Prenda.Color

Uniforme -->Prenda.Borrador

Uniforme <|-- UniformeSanJuan
Uniforme <|-- UniformeJohnson

class Uniforme{
-prendaSup: Prenda.Prenda
-prendaInf: Prenda.Prenda
-calzado: Prenda.Prenda

crearUniforme()
fabricarParteSuperior()
fabricarParteInf()
fabricarCalzado()
}

class UniformeSanJuan{}
class UniformeJohnson{}

class Prenda.Borrador{
-tipo
-trama
-colorPrincipal
-colorSecundario
-material

setColorPrincipal()
setColorSecundario()
SetTipoMaterial()
setTipo()
setTrana()
crearPrenda()
}


class Prenda.Prenda{
tipoDePrenda
material

categoria()
}

class TipoPrenda{
-categoria: Enum
}

class Prenda.Material{
-trama:
-colorPrincipal:
-colorSecundario:
-tipoMaterial:

}

class Prenda.Color{
-rojo: Int
-azul: Int
-verde: Int
}

Enum Humedad {

}

Class Clima.EstadoDelTiempo {
int temperatura
Humedad humedad
}

Clima.EstadoDelTiempo --> Humedad

class AsesorDelImagen {
Atuendo.Atuendo sugerirAtuendo(String direccion,Guardarropas guardaropas)
}

AsesorDelImagen ..> ServicioMetereologico
Clima.EstadoDelTiempo ..> ServicioMetereologico

Interface ServicioMetereologico{
Clima.EstadoDelTiempo obtenercondicionesClimaticas(String direccion)
}

ServicioMetereologico <|.. ServicioMetereologicoAccuWeather
ServicioMetereologico <|.. ServicioMetereologicoMock
ServicioMetereologico <|.. ServicioMetereologicoTheWeatherChannel

class ServicioMetereologicoAccuWeather {
Clima.EstadoDelTiempo obtenerCondicionesClimaticas(String direccion)
}

ServicioMetereologicoAccuWeather --> AccuWeatherAPI

class AccuWeatherAPI{
Map getWeather()
}

class ServicioMetereologicoMock{}

class ServicioMetereologicoTheWeatherChannel{}


@enduml